// Monk
// import RTSS/NormalMapping_MultiPass from "RTShaderSystem.material"


vertex_program myMonkVertexShader glsl
{
  source Creature.vert
    default_params
    {
        param_named_auto projectionMatrix projection_matrix
        param_named_auto viewMatrix view_matrix
        param_named_auto worldMatrix world_matrix
        param_named_auto lightMatrix texture_worldviewproj_matrix
    }
  
}

fragment_program myMonkFragmentShader glsl
{
  source Creature.frag
    default_params
    {
        param_named_auto ambientLightColour ambient_light_colour 
        param_named_auto lightDiffuseColour light_diffuse_colour 0
        param_named_auto lightSpecularColour light_specular_colour 0 
        param_named_auto lightPos light_position  0
        param_named_auto cameraPosition camera_position
        param_named shadowingEnabled bool false         
    }
}


material MonkBody //: RTSS/NormalMapping_MultiPass
{
    
    technique
    {

        pass 
        {
            vertex_program_ref myMonkVertexShader
            {
            
            }
            fragment_program_ref myMonkFragmentShader
            { 
            	param_named ambient float3 1.0 1.0 1.0
                param_named decalmap int 0
                param_named normalmap int 1
                param_named shadowmap int 2 
            }            
            
            
            // We use blending, so that we can see the underlying texture.
            texture_unit decalmap
            {
                texture MonkBody.png
            }
        
            texture_unit normalmap
            {
                texture MonkBodyNormal.png
            }  
            texture_unit shadowmap
            {
                content_type shadow
                tex_address_mode clamp
                filtering bilinear              
                
            }                
        }

    }
}

material MonkHair //: RTSS/NormalMapping_MultiPass
{
    
    technique
    {

        pass 
        {
            vertex_program_ref myMonkVertexShader
            {
            
            }
            fragment_program_ref myMonkFragmentShader
            { 
            	param_named ambient float3 1.0 1.0 1.0
                param_named decalmap int 0
                param_named normalmap int 1
                param_named shadowmap int 2 
            }            
            
            
            // We use blending, so that we can see the underlying texture.
            texture_unit decalmap
            {
                texture MonkHair.png
            }
        
            texture_unit normalmap
            {
                texture UniversalNormal.png
            }  
            texture_unit shadowmap
            {
                content_type shadow
                tex_address_mode clamp
                filtering bilinear              
                
            }                
        }

    }
}


material MonkHead //: RTSS/NormalMapping_MultiPass
{
    
    technique
    {

        pass 
        {
            vertex_program_ref myMonkVertexShader
            {
            
            }
            fragment_program_ref myMonkFragmentShader
            { 
            	param_named ambient float3 1.0 1.0 1.0
                param_named decalmap int 0
                param_named normalmap int 1
                param_named shadowmap int 2 
            }            
            
            
            // We use blending, so that we can see the underlying texture.
            texture_unit decalmap
            {
                texture MonkHead.png
            }
        
            texture_unit normalmap
            {
                texture MonkHeadNormal.png
            }  
            texture_unit shadowmap
            {
                content_type shadow
                tex_address_mode clamp
                filtering bilinear              
                
            }                
        }

    }
}








